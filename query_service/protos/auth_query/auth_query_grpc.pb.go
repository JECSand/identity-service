// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth_query.proto

package authQueryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthQueryServiceClient is the client API for AuthQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthQueryServiceClient interface {
	Authenticate(ctx context.Context, in *AuthenticateReq, opts ...grpc.CallOption) (*AuthenticateRes, error)
	BlacklistToken(ctx context.Context, in *BlacklistTokenReq, opts ...grpc.CallOption) (*BlacklistTokenRes, error)
	Validate(ctx context.Context, in *ValidateReq, opts ...grpc.CallOption) (*ValidateRes, error)
	UpdatePassword(ctx context.Context, in *PasswordUpdateReq, opts ...grpc.CallOption) (*PasswordUpdateRes, error)
}

type authQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthQueryServiceClient(cc grpc.ClientConnInterface) AuthQueryServiceClient {
	return &authQueryServiceClient{cc}
}

func (c *authQueryServiceClient) Authenticate(ctx context.Context, in *AuthenticateReq, opts ...grpc.CallOption) (*AuthenticateRes, error) {
	out := new(AuthenticateRes)
	err := c.cc.Invoke(ctx, "/authQueryService.authQueryService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authQueryServiceClient) BlacklistToken(ctx context.Context, in *BlacklistTokenReq, opts ...grpc.CallOption) (*BlacklistTokenRes, error) {
	out := new(BlacklistTokenRes)
	err := c.cc.Invoke(ctx, "/authQueryService.authQueryService/BlacklistToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authQueryServiceClient) Validate(ctx context.Context, in *ValidateReq, opts ...grpc.CallOption) (*ValidateRes, error) {
	out := new(ValidateRes)
	err := c.cc.Invoke(ctx, "/authQueryService.authQueryService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authQueryServiceClient) UpdatePassword(ctx context.Context, in *PasswordUpdateReq, opts ...grpc.CallOption) (*PasswordUpdateRes, error) {
	out := new(PasswordUpdateRes)
	err := c.cc.Invoke(ctx, "/authQueryService.authQueryService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthQueryServiceServer is the server API for AuthQueryService service.
// All implementations should embed UnimplementedAuthQueryServiceServer
// for forward compatibility
type AuthQueryServiceServer interface {
	Authenticate(context.Context, *AuthenticateReq) (*AuthenticateRes, error)
	BlacklistToken(context.Context, *BlacklistTokenReq) (*BlacklistTokenRes, error)
	Validate(context.Context, *ValidateReq) (*ValidateRes, error)
	UpdatePassword(context.Context, *PasswordUpdateReq) (*PasswordUpdateRes, error)
}

// UnimplementedAuthQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthQueryServiceServer struct {
}

func (UnimplementedAuthQueryServiceServer) Authenticate(context.Context, *AuthenticateReq) (*AuthenticateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthQueryServiceServer) BlacklistToken(context.Context, *BlacklistTokenReq) (*BlacklistTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistToken not implemented")
}
func (UnimplementedAuthQueryServiceServer) Validate(context.Context, *ValidateReq) (*ValidateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedAuthQueryServiceServer) UpdatePassword(context.Context, *PasswordUpdateReq) (*PasswordUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}

// UnsafeAuthQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthQueryServiceServer will
// result in compilation errors.
type UnsafeAuthQueryServiceServer interface {
	mustEmbedUnimplementedAuthQueryServiceServer()
}

func RegisterAuthQueryServiceServer(s grpc.ServiceRegistrar, srv AuthQueryServiceServer) {
	s.RegisterService(&AuthQueryService_ServiceDesc, srv)
}

func _AuthQueryService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthQueryServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authQueryService.authQueryService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthQueryServiceServer).Authenticate(ctx, req.(*AuthenticateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthQueryService_BlacklistToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthQueryServiceServer).BlacklistToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authQueryService.authQueryService/BlacklistToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthQueryServiceServer).BlacklistToken(ctx, req.(*BlacklistTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthQueryService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthQueryServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authQueryService.authQueryService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthQueryServiceServer).Validate(ctx, req.(*ValidateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthQueryService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthQueryServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authQueryService.authQueryService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthQueryServiceServer).UpdatePassword(ctx, req.(*PasswordUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthQueryService_ServiceDesc is the grpc.ServiceDesc for AuthQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authQueryService.authQueryService",
	HandlerType: (*AuthQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthQueryService_Authenticate_Handler,
		},
		{
			MethodName: "BlacklistToken",
			Handler:    _AuthQueryService_BlacklistToken_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AuthQueryService_Validate_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AuthQueryService_UpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_query.proto",
}
