// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: group_query.proto

package groupQueryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupQueryServiceClient is the client API for GroupQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupQueryServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error)
	GetGroupById(ctx context.Context, in *GetGroupByIdReq, opts ...grpc.CallOption) (*GetGroupByIdRes, error)
	SearchGroup(ctx context.Context, in *SearchGroupReq, opts ...grpc.CallOption) (*SearchGroupRes, error)
	DeleteGroupByID(ctx context.Context, in *DeleteGroupByIdReq, opts ...grpc.CallOption) (*DeleteGroupByIdRes, error)
}

type groupQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupQueryServiceClient(cc grpc.ClientConnInterface) GroupQueryServiceClient {
	return &groupQueryServiceClient{cc}
}

func (c *groupQueryServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRes, error) {
	out := new(CreateGroupRes)
	err := c.cc.Invoke(ctx, "/groupQueryService.groupQueryService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error) {
	out := new(UpdateGroupRes)
	err := c.cc.Invoke(ctx, "/groupQueryService.groupQueryService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) GetGroupById(ctx context.Context, in *GetGroupByIdReq, opts ...grpc.CallOption) (*GetGroupByIdRes, error) {
	out := new(GetGroupByIdRes)
	err := c.cc.Invoke(ctx, "/groupQueryService.groupQueryService/GetGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) SearchGroup(ctx context.Context, in *SearchGroupReq, opts ...grpc.CallOption) (*SearchGroupRes, error) {
	out := new(SearchGroupRes)
	err := c.cc.Invoke(ctx, "/groupQueryService.groupQueryService/SearchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupQueryServiceClient) DeleteGroupByID(ctx context.Context, in *DeleteGroupByIdReq, opts ...grpc.CallOption) (*DeleteGroupByIdRes, error) {
	out := new(DeleteGroupByIdRes)
	err := c.cc.Invoke(ctx, "/groupQueryService.groupQueryService/DeleteGroupByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupQueryServiceServer is the server API for GroupQueryService service.
// All implementations should embed UnimplementedGroupQueryServiceServer
// for forward compatibility
type GroupQueryServiceServer interface {
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error)
	GetGroupById(context.Context, *GetGroupByIdReq) (*GetGroupByIdRes, error)
	SearchGroup(context.Context, *SearchGroupReq) (*SearchGroupRes, error)
	DeleteGroupByID(context.Context, *DeleteGroupByIdReq) (*DeleteGroupByIdRes, error)
}

// UnimplementedGroupQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroupQueryServiceServer struct {
}

func (UnimplementedGroupQueryServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupQueryServiceServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupQueryServiceServer) GetGroupById(context.Context, *GetGroupByIdReq) (*GetGroupByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}
func (UnimplementedGroupQueryServiceServer) SearchGroup(context.Context, *SearchGroupReq) (*SearchGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedGroupQueryServiceServer) DeleteGroupByID(context.Context, *DeleteGroupByIdReq) (*DeleteGroupByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupByID not implemented")
}

// UnsafeGroupQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupQueryServiceServer will
// result in compilation errors.
type UnsafeGroupQueryServiceServer interface {
	mustEmbedUnimplementedGroupQueryServiceServer()
}

func RegisterGroupQueryServiceServer(s grpc.ServiceRegistrar, srv GroupQueryServiceServer) {
	s.RegisterService(&GroupQueryService_ServiceDesc, srv)
}

func _GroupQueryService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupQueryService.groupQueryService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupQueryService.groupQueryService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupQueryService.groupQueryService/GetGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).GetGroupById(ctx, req.(*GetGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupQueryService.groupQueryService/SearchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).SearchGroup(ctx, req.(*SearchGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupQueryService_DeleteGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupQueryServiceServer).DeleteGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupQueryService.groupQueryService/DeleteGroupByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupQueryServiceServer).DeleteGroupByID(ctx, req.(*DeleteGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupQueryService_ServiceDesc is the grpc.ServiceDesc for GroupQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupQueryService.groupQueryService",
	HandlerType: (*GroupQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupQueryService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupQueryService_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroupById",
			Handler:    _GroupQueryService_GetGroupById_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _GroupQueryService_SearchGroup_Handler,
		},
		{
			MethodName: "DeleteGroupByID",
			Handler:    _GroupQueryService_DeleteGroupByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_query.proto",
}
