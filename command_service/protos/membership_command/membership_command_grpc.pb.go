// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: membership_command.proto

package membershipCommandService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MembershipCommandServiceClient is the client API for MembershipCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembershipCommandServiceClient interface {
	CreateMembership(ctx context.Context, in *CreateMembershipReq, opts ...grpc.CallOption) (*CreateMembershipRes, error)
	UpdateMembership(ctx context.Context, in *UpdateMembershipReq, opts ...grpc.CallOption) (*UpdateMembershipRes, error)
	GetMembershipById(ctx context.Context, in *GetMembershipByIdReq, opts ...grpc.CallOption) (*GetMembershipByIdRes, error)
}

type membershipCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMembershipCommandServiceClient(cc grpc.ClientConnInterface) MembershipCommandServiceClient {
	return &membershipCommandServiceClient{cc}
}

func (c *membershipCommandServiceClient) CreateMembership(ctx context.Context, in *CreateMembershipReq, opts ...grpc.CallOption) (*CreateMembershipRes, error) {
	out := new(CreateMembershipRes)
	err := c.cc.Invoke(ctx, "/membershipCommandService.membershipCommandService/CreateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCommandServiceClient) UpdateMembership(ctx context.Context, in *UpdateMembershipReq, opts ...grpc.CallOption) (*UpdateMembershipRes, error) {
	out := new(UpdateMembershipRes)
	err := c.cc.Invoke(ctx, "/membershipCommandService.membershipCommandService/UpdateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCommandServiceClient) GetMembershipById(ctx context.Context, in *GetMembershipByIdReq, opts ...grpc.CallOption) (*GetMembershipByIdRes, error) {
	out := new(GetMembershipByIdRes)
	err := c.cc.Invoke(ctx, "/membershipCommandService.membershipCommandService/GetMembershipById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembershipCommandServiceServer is the server API for MembershipCommandService service.
// All implementations should embed UnimplementedMembershipCommandServiceServer
// for forward compatibility
type MembershipCommandServiceServer interface {
	CreateMembership(context.Context, *CreateMembershipReq) (*CreateMembershipRes, error)
	UpdateMembership(context.Context, *UpdateMembershipReq) (*UpdateMembershipRes, error)
	GetMembershipById(context.Context, *GetMembershipByIdReq) (*GetMembershipByIdRes, error)
}

// UnimplementedMembershipCommandServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMembershipCommandServiceServer struct {
}

func (UnimplementedMembershipCommandServiceServer) CreateMembership(context.Context, *CreateMembershipReq) (*CreateMembershipRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (UnimplementedMembershipCommandServiceServer) UpdateMembership(context.Context, *UpdateMembershipReq) (*UpdateMembershipRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (UnimplementedMembershipCommandServiceServer) GetMembershipById(context.Context, *GetMembershipByIdReq) (*GetMembershipByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipById not implemented")
}

// UnsafeMembershipCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembershipCommandServiceServer will
// result in compilation errors.
type UnsafeMembershipCommandServiceServer interface {
	mustEmbedUnimplementedMembershipCommandServiceServer()
}

func RegisterMembershipCommandServiceServer(s grpc.ServiceRegistrar, srv MembershipCommandServiceServer) {
	s.RegisterService(&MembershipCommandService_ServiceDesc, srv)
}

func _MembershipCommandService_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCommandServiceServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membershipCommandService.membershipCommandService/CreateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCommandServiceServer).CreateMembership(ctx, req.(*CreateMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCommandService_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCommandServiceServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membershipCommandService.membershipCommandService/UpdateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCommandServiceServer).UpdateMembership(ctx, req.(*UpdateMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCommandService_GetMembershipById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCommandServiceServer).GetMembershipById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/membershipCommandService.membershipCommandService/GetMembershipById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCommandServiceServer).GetMembershipById(ctx, req.(*GetMembershipByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MembershipCommandService_ServiceDesc is the grpc.ServiceDesc for MembershipCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembershipCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "membershipCommandService.membershipCommandService",
	HandlerType: (*MembershipCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMembership",
			Handler:    _MembershipCommandService_CreateMembership_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _MembershipCommandService_UpdateMembership_Handler,
		},
		{
			MethodName: "GetMembershipById",
			Handler:    _MembershipCommandService_GetMembershipById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "membership_command.proto",
}
