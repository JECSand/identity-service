// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: auth_command.proto

package authCommandService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthCommandServiceClient is the client API for AuthCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthCommandServiceClient interface {
	BlacklistToken(ctx context.Context, in *BlacklistTokenReq, opts ...grpc.CallOption) (*BlacklistTokenRes, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordRes, error)
	CheckTokenBlacklist(ctx context.Context, in *CheckBlacklistReq, opts ...grpc.CallOption) (*CheckBlacklistRes, error)
}

type authCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthCommandServiceClient(cc grpc.ClientConnInterface) AuthCommandServiceClient {
	return &authCommandServiceClient{cc}
}

func (c *authCommandServiceClient) BlacklistToken(ctx context.Context, in *BlacklistTokenReq, opts ...grpc.CallOption) (*BlacklistTokenRes, error) {
	out := new(BlacklistTokenRes)
	err := c.cc.Invoke(ctx, "/authCommandService.authCommandService/BlacklistToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCommandServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*UpdatePasswordRes, error) {
	out := new(UpdatePasswordRes)
	err := c.cc.Invoke(ctx, "/authCommandService.authCommandService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCommandServiceClient) CheckTokenBlacklist(ctx context.Context, in *CheckBlacklistReq, opts ...grpc.CallOption) (*CheckBlacklistRes, error) {
	out := new(CheckBlacklistRes)
	err := c.cc.Invoke(ctx, "/authCommandService.authCommandService/CheckTokenBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthCommandServiceServer is the server API for AuthCommandService service.
// All implementations should embed UnimplementedAuthCommandServiceServer
// for forward compatibility
type AuthCommandServiceServer interface {
	BlacklistToken(context.Context, *BlacklistTokenReq) (*BlacklistTokenRes, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordRes, error)
	CheckTokenBlacklist(context.Context, *CheckBlacklistReq) (*CheckBlacklistRes, error)
}

// UnimplementedAuthCommandServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthCommandServiceServer struct {
}

func (UnimplementedAuthCommandServiceServer) BlacklistToken(context.Context, *BlacklistTokenReq) (*BlacklistTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistToken not implemented")
}
func (UnimplementedAuthCommandServiceServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*UpdatePasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAuthCommandServiceServer) CheckTokenBlacklist(context.Context, *CheckBlacklistReq) (*CheckBlacklistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenBlacklist not implemented")
}

// UnsafeAuthCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthCommandServiceServer will
// result in compilation errors.
type UnsafeAuthCommandServiceServer interface {
	mustEmbedUnimplementedAuthCommandServiceServer()
}

func RegisterAuthCommandServiceServer(s grpc.ServiceRegistrar, srv AuthCommandServiceServer) {
	s.RegisterService(&AuthCommandService_ServiceDesc, srv)
}

func _AuthCommandService_BlacklistToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCommandServiceServer).BlacklistToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authCommandService.authCommandService/BlacklistToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCommandServiceServer).BlacklistToken(ctx, req.(*BlacklistTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCommandService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCommandServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authCommandService.authCommandService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCommandServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthCommandService_CheckTokenBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthCommandServiceServer).CheckTokenBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authCommandService.authCommandService/CheckTokenBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthCommandServiceServer).CheckTokenBlacklist(ctx, req.(*CheckBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthCommandService_ServiceDesc is the grpc.ServiceDesc for AuthCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authCommandService.authCommandService",
	HandlerType: (*AuthCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlacklistToken",
			Handler:    _AuthCommandService_BlacklistToken_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AuthCommandService_UpdatePassword_Handler,
		},
		{
			MethodName: "CheckTokenBlacklist",
			Handler:    _AuthCommandService_CheckTokenBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_command.proto",
}
