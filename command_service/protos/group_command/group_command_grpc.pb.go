// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: group_command.proto

package groupCommandService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupCommandServiceClient is the client API for GroupCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupCommandServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error)
	GetGroupById(ctx context.Context, in *GetGroupByIdReq, opts ...grpc.CallOption) (*GetGroupByIdRes, error)
}

type groupCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCommandServiceClient(cc grpc.ClientConnInterface) GroupCommandServiceClient {
	return &groupCommandServiceClient{cc}
}

func (c *groupCommandServiceClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupRes, error) {
	out := new(CreateGroupRes)
	err := c.cc.Invoke(ctx, "/groupCommandService.groupCommandService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCommandServiceClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupRes, error) {
	out := new(UpdateGroupRes)
	err := c.cc.Invoke(ctx, "/groupCommandService.groupCommandService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCommandServiceClient) GetGroupById(ctx context.Context, in *GetGroupByIdReq, opts ...grpc.CallOption) (*GetGroupByIdRes, error) {
	out := new(GetGroupByIdRes)
	err := c.cc.Invoke(ctx, "/groupCommandService.groupCommandService/GetGroupById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCommandServiceServer is the server API for GroupCommandService service.
// All implementations should embed UnimplementedGroupCommandServiceServer
// for forward compatibility
type GroupCommandServiceServer interface {
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error)
	GetGroupById(context.Context, *GetGroupByIdReq) (*GetGroupByIdRes, error)
}

// UnimplementedGroupCommandServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroupCommandServiceServer struct {
}

func (UnimplementedGroupCommandServiceServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupCommandServiceServer) UpdateGroup(context.Context, *UpdateGroupReq) (*UpdateGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupCommandServiceServer) GetGroupById(context.Context, *GetGroupByIdReq) (*GetGroupByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}

// UnsafeGroupCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupCommandServiceServer will
// result in compilation errors.
type UnsafeGroupCommandServiceServer interface {
	mustEmbedUnimplementedGroupCommandServiceServer()
}

func RegisterGroupCommandServiceServer(s grpc.ServiceRegistrar, srv GroupCommandServiceServer) {
	s.RegisterService(&GroupCommandService_ServiceDesc, srv)
}

func _GroupCommandService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCommandServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupCommandService.groupCommandService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCommandServiceServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCommandService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCommandServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupCommandService.groupCommandService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCommandServiceServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCommandService_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCommandServiceServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/groupCommandService.groupCommandService/GetGroupById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCommandServiceServer).GetGroupById(ctx, req.(*GetGroupByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupCommandService_ServiceDesc is the grpc.ServiceDesc for GroupCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "groupCommandService.groupCommandService",
	HandlerType: (*GroupCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupCommandService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupCommandService_UpdateGroup_Handler,
		},
		{
			MethodName: "GetGroupById",
			Handler:    _GroupCommandService_GetGroupById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_command.proto",
}
